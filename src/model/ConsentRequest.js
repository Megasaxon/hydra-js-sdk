/**
 * ORY Hydra
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OAuth2Client from './OAuth2Client';
import OpenIDConnectContext from './OpenIDConnectContext';

/**
 * The ConsentRequest model module.
 * @module model/ConsentRequest
 * @version latest
 */
class ConsentRequest {
    /**
     * Constructs a new <code>ConsentRequest</code>.
     * @alias module:model/ConsentRequest
     */
    constructor() { 
        
        ConsentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConsentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsentRequest} obj Optional instance to populate.
     * @return {module:model/ConsentRequest} The populated <code>ConsentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsentRequest();

            if (data.hasOwnProperty('acr')) {
                obj['acr'] = ApiClient.convertToType(data['acr'], 'String');
            }
            if (data.hasOwnProperty('challenge')) {
                obj['challenge'] = ApiClient.convertToType(data['challenge'], 'String');
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = OAuth2Client.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('login_challenge')) {
                obj['login_challenge'] = ApiClient.convertToType(data['login_challenge'], 'String');
            }
            if (data.hasOwnProperty('login_session_id')) {
                obj['login_session_id'] = ApiClient.convertToType(data['login_session_id'], 'String');
            }
            if (data.hasOwnProperty('oidc_context')) {
                obj['oidc_context'] = OpenIDConnectContext.constructFromObject(data['oidc_context']);
            }
            if (data.hasOwnProperty('request_url')) {
                obj['request_url'] = ApiClient.convertToType(data['request_url'], 'String');
            }
            if (data.hasOwnProperty('requested_access_token_audience')) {
                obj['requested_access_token_audience'] = ApiClient.convertToType(data['requested_access_token_audience'], ['String']);
            }
            if (data.hasOwnProperty('requested_scope')) {
                obj['requested_scope'] = ApiClient.convertToType(data['requested_scope'], ['String']);
            }
            if (data.hasOwnProperty('skip')) {
                obj['skip'] = ApiClient.convertToType(data['skip'], 'Boolean');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
        }
        return obj;
    }


}

/**
 * ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it to express that, for example, a user authenticated using two factor authentication.
 * @member {String} acr
 */
ConsentRequest.prototype['acr'] = undefined;

/**
 * Challenge is the identifier (\"authorization challenge\") of the consent authorization request. It is used to identify the session.
 * @member {String} challenge
 */
ConsentRequest.prototype['challenge'] = undefined;

/**
 * @member {module:model/OAuth2Client} client
 */
ConsentRequest.prototype['client'] = undefined;

/**
 * LoginChallenge is the login challenge this consent challenge belongs to. It can be used to associate a login and consent request in the login & consent app.
 * @member {String} login_challenge
 */
ConsentRequest.prototype['login_challenge'] = undefined;

/**
 * LoginSessionID is the authentication session ID. It is set if the browser had a valid authentication session at ORY Hydra during the login flow. It can be used to associate consecutive login requests by a certain user.
 * @member {String} login_session_id
 */
ConsentRequest.prototype['login_session_id'] = undefined;

/**
 * @member {module:model/OpenIDConnectContext} oidc_context
 */
ConsentRequest.prototype['oidc_context'] = undefined;

/**
 * RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
 * @member {String} request_url
 */
ConsentRequest.prototype['request_url'] = undefined;

/**
 * RequestedScope contains the access token audience as requested by the OAuth 2.0 Client.
 * @member {Array.<String>} requested_access_token_audience
 */
ConsentRequest.prototype['requested_access_token_audience'] = undefined;

/**
 * RequestedScope contains the OAuth 2.0 Scope requested by the OAuth 2.0 Client.
 * @member {Array.<String>} requested_scope
 */
ConsentRequest.prototype['requested_scope'] = undefined;

/**
 * Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you must not ask the user to grant the requested scopes. You must however either allow or deny the consent request using the usual API call.
 * @member {Boolean} skip
 */
ConsentRequest.prototype['skip'] = undefined;

/**
 * Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client.
 * @member {String} subject
 */
ConsentRequest.prototype['subject'] = undefined;






export default ConsentRequest;

