/**
 * ORY Hydra
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptConsentRequest from '../model/AcceptConsentRequest';
import AcceptLoginRequest from '../model/AcceptLoginRequest';
import CompletedRequest from '../model/CompletedRequest';
import ConsentRequest from '../model/ConsentRequest';
import FlushInactiveOAuth2TokensRequest from '../model/FlushInactiveOAuth2TokensRequest';
import GenericError from '../model/GenericError';
import JSONWebKey from '../model/JSONWebKey';
import JSONWebKeySet from '../model/JSONWebKeySet';
import JsonWebKeySetGeneratorRequest from '../model/JsonWebKeySetGeneratorRequest';
import LoginRequest from '../model/LoginRequest';
import LogoutRequest from '../model/LogoutRequest';
import OAuth2Client from '../model/OAuth2Client';
import OAuth2TokenIntrospection from '../model/OAuth2TokenIntrospection';
import PreviousConsentSession from '../model/PreviousConsentSession';
import RejectRequest from '../model/RejectRequest';

/**
* Admin service.
* @module api/AdminApi
* @version latest
*/
export default class AdminApi {

    /**
    * Constructs a new AdminApi. 
    * @alias module:api/AdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptConsentRequest operation.
     * @callback module:api/AdminApi~acceptConsentRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompletedRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept an consent request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @param {String} consentChallenge 
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptConsentRequest} opts.body 
     * @param {module:api/AdminApi~acceptConsentRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompletedRequest}
     */
    acceptConsentRequest(consentChallenge, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      // verify the required parameter 'consentChallenge' is set
      if (consentChallenge === undefined || consentChallenge === null) {
        throw new Error("Missing the required parameter 'consentChallenge' when calling acceptConsentRequest");
      }


      let pathParams = {
      };
      let queryParams = {
        'consent_challenge': consentChallenge
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompletedRequest;

      return this.apiClient.callApi(
        '/oauth2/auth/requests/consent/accept', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the acceptLoginRequest operation.
     * @callback module:api/AdminApi~acceptLoginRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompletedRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept an login request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as the subject&#39;s ID and if ORY Hydra should remember the subject&#39;s subject agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @param {String} loginChallenge 
     * @param {Object} opts Optional parameters
     * @param {module:model/AcceptLoginRequest} opts.body 
     * @param {module:api/AdminApi~acceptLoginRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompletedRequest}
     */
    acceptLoginRequest(loginChallenge, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      // verify the required parameter 'loginChallenge' is set
      if (loginChallenge === undefined || loginChallenge === null) {
        throw new Error("Missing the required parameter 'loginChallenge' when calling acceptLoginRequest");
      }


      let pathParams = {
      };
      let queryParams = {
        'login_challenge': loginChallenge
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompletedRequest;

      return this.apiClient.callApi(
        '/oauth2/auth/requests/login/accept', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the acceptLogoutRequest operation.
     * @callback module:api/AdminApi~acceptLogoutRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompletedRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept a logout request
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request. No body is required.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @param {String} logoutChallenge 
     * @param {module:api/AdminApi~acceptLogoutRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompletedRequest}
     */
    acceptLogoutRequest(logoutChallenge, callback) {
      let postBody = null;

      // verify the required parameter 'logoutChallenge' is set
      if (logoutChallenge === undefined || logoutChallenge === null) {
        throw new Error("Missing the required parameter 'logoutChallenge' when calling acceptLogoutRequest");
      }


      let pathParams = {
      };
      let queryParams = {
        'logout_challenge': logoutChallenge
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompletedRequest;

      return this.apiClient.callApi(
        '/oauth2/auth/requests/logout/accept', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createJsonWebKeySet operation.
     * @callback module:api/AdminApi~createJsonWebKeySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JSONWebKeySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a new JSON Web Key
     * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @param {String} set The set
     * @param {Object} opts Optional parameters
     * @param {module:model/JsonWebKeySetGeneratorRequest} opts.body 
     * @param {module:api/AdminApi~createJsonWebKeySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JSONWebKeySet}
     */
    createJsonWebKeySet(set, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling createJsonWebKeySet");
      }


      let pathParams = {
        'set': set
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JSONWebKeySet;

      return this.apiClient.callApi(
        '/keys/{set}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOAuth2Client operation.
     * @callback module:api/AdminApi~createOAuth2ClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuth2Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an OAuth 2.0 client
     * Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     * @param {module:model/OAuth2Client} body 
     * @param {module:api/AdminApi~createOAuth2ClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuth2Client}
     */
    createOAuth2Client(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createOAuth2Client");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OAuth2Client;

      return this.apiClient.callApi(
        '/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJsonWebKey operation.
     * @callback module:api/AdminApi~deleteJsonWebKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a JSON Web Key
     * Use this endpoint to delete a single JSON Web Key.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @param {String} kid The kid of the desired key
     * @param {String} set The set
     * @param {module:api/AdminApi~deleteJsonWebKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteJsonWebKey(kid, set, callback) {
      let postBody = null;

      // verify the required parameter 'kid' is set
      if (kid === undefined || kid === null) {
        throw new Error("Missing the required parameter 'kid' when calling deleteJsonWebKey");
      }

      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling deleteJsonWebKey");
      }


      let pathParams = {
        'kid': kid,
        'set': set
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/keys/{set}/{kid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJsonWebKeySet operation.
     * @callback module:api/AdminApi~deleteJsonWebKeySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a JSON Web Key Set
     * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @param {String} set The set
     * @param {module:api/AdminApi~deleteJsonWebKeySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteJsonWebKeySet(set, callback) {
      let postBody = null;

      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling deleteJsonWebKeySet");
      }


      let pathParams = {
        'set': set
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/keys/{set}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOAuth2Client operation.
     * @callback module:api/AdminApi~deleteOAuth2ClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an OAuth 2.0 Client
     * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     * @param {String} id The id of the OAuth 2.0 Client.
     * @param {module:api/AdminApi~deleteOAuth2ClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteOAuth2Client(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOAuth2Client");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/clients/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the flushInactiveOAuth2Tokens operation.
     * @callback module:api/AdminApi~flushInactiveOAuth2TokensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flush Expired OAuth2 Access Tokens
     * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
     * @param {Object} opts Optional parameters
     * @param {module:model/FlushInactiveOAuth2TokensRequest} opts.body 
     * @param {module:api/AdminApi~flushInactiveOAuth2TokensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flushInactiveOAuth2Tokens(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/oauth2/flush', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsentRequest operation.
     * @callback module:api/AdminApi~getConsentRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsentRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get consent request information
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.
     * @param {String} consentChallenge 
     * @param {module:api/AdminApi~getConsentRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsentRequest}
     */
    getConsentRequest(consentChallenge, callback) {
      let postBody = null;

      // verify the required parameter 'consentChallenge' is set
      if (consentChallenge === undefined || consentChallenge === null) {
        throw new Error("Missing the required parameter 'consentChallenge' when calling getConsentRequest");
      }


      let pathParams = {
      };
      let queryParams = {
        'consent_challenge': consentChallenge
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsentRequest;

      return this.apiClient.callApi(
        '/oauth2/auth/requests/consent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJsonWebKey operation.
     * @callback module:api/AdminApi~getJsonWebKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JSONWebKeySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a JSON Web Key
     * This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid).
     * @param {String} kid The kid of the desired key
     * @param {String} set The set
     * @param {module:api/AdminApi~getJsonWebKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JSONWebKeySet}
     */
    getJsonWebKey(kid, set, callback) {
      let postBody = null;

      // verify the required parameter 'kid' is set
      if (kid === undefined || kid === null) {
        throw new Error("Missing the required parameter 'kid' when calling getJsonWebKey");
      }

      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling getJsonWebKey");
      }


      let pathParams = {
        'kid': kid,
        'set': set
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JSONWebKeySet;

      return this.apiClient.callApi(
        '/keys/{set}/{kid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJsonWebKeySet operation.
     * @callback module:api/AdminApi~getJsonWebKeySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JSONWebKeySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a JSON Web Key Set
     * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @param {String} set The set
     * @param {module:api/AdminApi~getJsonWebKeySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JSONWebKeySet}
     */
    getJsonWebKeySet(set, callback) {
      let postBody = null;

      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling getJsonWebKeySet");
      }


      let pathParams = {
        'set': set
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JSONWebKeySet;

      return this.apiClient.callApi(
        '/keys/{set}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLoginRequest operation.
     * @callback module:api/AdminApi~getLoginRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an login request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
     * @param {String} loginChallenge 
     * @param {module:api/AdminApi~getLoginRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginRequest}
     */
    getLoginRequest(loginChallenge, callback) {
      let postBody = null;

      // verify the required parameter 'loginChallenge' is set
      if (loginChallenge === undefined || loginChallenge === null) {
        throw new Error("Missing the required parameter 'loginChallenge' when calling getLoginRequest");
      }


      let pathParams = {
      };
      let queryParams = {
        'login_challenge': loginChallenge
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginRequest;

      return this.apiClient.callApi(
        '/oauth2/auth/requests/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLogoutRequest operation.
     * @callback module:api/AdminApi~getLogoutRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogoutRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a logout request
     * Use this endpoint to fetch a logout request.
     * @param {String} logoutChallenge 
     * @param {module:api/AdminApi~getLogoutRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogoutRequest}
     */
    getLogoutRequest(logoutChallenge, callback) {
      let postBody = null;

      // verify the required parameter 'logoutChallenge' is set
      if (logoutChallenge === undefined || logoutChallenge === null) {
        throw new Error("Missing the required parameter 'logoutChallenge' when calling getLogoutRequest");
      }


      let pathParams = {
      };
      let queryParams = {
        'logout_challenge': logoutChallenge
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogoutRequest;

      return this.apiClient.callApi(
        '/oauth2/auth/requests/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOAuth2Client operation.
     * @callback module:api/AdminApi~getOAuth2ClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuth2Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an OAuth 2.0 Client.
     * Get an OAUth 2.0 client by its ID. This endpoint never returns passwords.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     * @param {String} id The id of the OAuth 2.0 Client.
     * @param {module:api/AdminApi~getOAuth2ClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuth2Client}
     */
    getOAuth2Client(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOAuth2Client");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OAuth2Client;

      return this.apiClient.callApi(
        '/clients/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the introspectOAuth2Token operation.
     * @callback module:api/AdminApi~introspectOAuth2TokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuth2TokenIntrospection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Introspect OAuth2 tokens
     * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.
     * @param {String} token The string value of the token. For access tokens, this is the \\\&quot;access_token\\\&quot; value returned from the token endpoint defined in OAuth 2.0. For refresh tokens, this is the \\\&quot;refresh_token\\\&quot; value returned.
     * @param {Object} opts Optional parameters
     * @param {String} opts.scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
     * @param {module:api/AdminApi~introspectOAuth2TokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuth2TokenIntrospection}
     */
    introspectOAuth2Token(token, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling introspectOAuth2Token");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'token': token,
        'scope': opts['scope']
      };

      let authNames = ['basic', 'oauth2'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = OAuth2TokenIntrospection;

      return this.apiClient.callApi(
        '/oauth2/introspect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listOAuth2Clients operation.
     * @callback module:api/AdminApi~listOAuth2ClientsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OAuth2Client>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List OAuth 2.0 Clients
     * This endpoint lists all clients in the database, and never returns client secrets.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components. The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/clients?limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum amount of policies returned.
     * @param {Number} opts.offset The offset from where to start looking.
     * @param {module:api/AdminApi~listOAuth2ClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OAuth2Client>}
     */
    listOAuth2Clients(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OAuth2Client];

      return this.apiClient.callApi(
        '/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSubjectConsentSessions operation.
     * @callback module:api/AdminApi~listSubjectConsentSessionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PreviousConsentSession>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all consent sessions of a subject
     * This endpoint lists all subject&#39;s granted consent sessions, including client and granted scope. The \&quot;Link\&quot; header is also included in successful responses, which contains one or more links for pagination, formatted like so: &#39;&lt;https://hydra-url/admin/oauth2/auth/sessions/consent?subject&#x3D;{user}&amp;limit&#x3D;{limit}&amp;offset&#x3D;{offset}&gt;; rel&#x3D;\&quot;{page}\&quot;&#39;, where page is one of the following applicable pages: &#39;first&#39;, &#39;next&#39;, &#39;last&#39;, and &#39;previous&#39;. Multiple links can be included in this header, and will be separated by a comma.
     * @param {String} subject 
     * @param {module:api/AdminApi~listSubjectConsentSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PreviousConsentSession>}
     */
    listSubjectConsentSessions(subject, callback) {
      let postBody = null;

      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling listSubjectConsentSessions");
      }


      let pathParams = {
      };
      let queryParams = {
        'subject': subject
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PreviousConsentSession];

      return this.apiClient.callApi(
        '/oauth2/auth/sessions/consent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectConsentRequest operation.
     * @callback module:api/AdminApi~rejectConsentRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompletedRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reject an consent request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the subject&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted or rejected the request.  This endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
     * @param {String} consentChallenge 
     * @param {Object} opts Optional parameters
     * @param {module:model/RejectRequest} opts.body 
     * @param {module:api/AdminApi~rejectConsentRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompletedRequest}
     */
    rejectConsentRequest(consentChallenge, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      // verify the required parameter 'consentChallenge' is set
      if (consentChallenge === undefined || consentChallenge === null) {
        throw new Error("Missing the required parameter 'consentChallenge' when calling rejectConsentRequest");
      }


      let pathParams = {
      };
      let queryParams = {
        'consent_challenge': consentChallenge
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompletedRequest;

      return this.apiClient.callApi(
        '/oauth2/auth/requests/consent/reject', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectLoginRequest operation.
     * @callback module:api/AdminApi~rejectLoginRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompletedRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reject a login request
     * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the subject and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the subject a login screen\&quot;) a subject (in OAuth2 the proper name for subject is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the subject&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
     * @param {String} loginChallenge 
     * @param {Object} opts Optional parameters
     * @param {module:model/RejectRequest} opts.body 
     * @param {module:api/AdminApi~rejectLoginRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompletedRequest}
     */
    rejectLoginRequest(loginChallenge, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      // verify the required parameter 'loginChallenge' is set
      if (loginChallenge === undefined || loginChallenge === null) {
        throw new Error("Missing the required parameter 'loginChallenge' when calling rejectLoginRequest");
      }


      let pathParams = {
      };
      let queryParams = {
        'login_challenge': loginChallenge
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompletedRequest;

      return this.apiClient.callApi(
        '/oauth2/auth/requests/login/reject', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectLogoutRequest operation.
     * @callback module:api/AdminApi~rejectLogoutRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reject a logout request
     * When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request. No body is required.  The response is empty as the logout provider has to chose what action to perform next.
     * @param {String} logoutChallenge 
     * @param {Object} opts Optional parameters
     * @param {module:model/RejectRequest} opts.body 
     * @param {module:api/AdminApi~rejectLogoutRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rejectLogoutRequest(logoutChallenge, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      // verify the required parameter 'logoutChallenge' is set
      if (logoutChallenge === undefined || logoutChallenge === null) {
        throw new Error("Missing the required parameter 'logoutChallenge' when calling rejectLogoutRequest");
      }


      let pathParams = {
      };
      let queryParams = {
        'logout_challenge': logoutChallenge
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/oauth2/auth/requests/logout/reject', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeAuthenticationSession operation.
     * @callback module:api/AdminApi~revokeAuthenticationSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidates all login sessions of a certain user Invalidates a subject&#39;s authentication session
     * This endpoint invalidates a subject&#39;s authentication session. After revoking the authentication session, the subject has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens.
     * @param {String} subject 
     * @param {module:api/AdminApi~revokeAuthenticationSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeAuthenticationSession(subject, callback) {
      let postBody = null;

      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling revokeAuthenticationSession");
      }


      let pathParams = {
      };
      let queryParams = {
        'subject': subject
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/oauth2/auth/sessions/login', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeConsentSessions operation.
     * @callback module:api/AdminApi~revokeConsentSessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes consent sessions of a subject for a specific OAuth 2.0 Client
     * This endpoint revokes a subject&#39;s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
     * @param {String} subject The subject (Subject) who&#39;s consent sessions should be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} opts.client If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID
     * @param {module:api/AdminApi~revokeConsentSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeConsentSessions(subject, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling revokeConsentSessions");
      }


      let pathParams = {
      };
      let queryParams = {
        'subject': subject,
        'client': opts['client']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/oauth2/auth/sessions/consent', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJsonWebKey operation.
     * @callback module:api/AdminApi~updateJsonWebKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JSONWebKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a JSON Web Key
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @param {String} kid The kid of the desired key
     * @param {String} set The set
     * @param {Object} opts Optional parameters
     * @param {module:model/JSONWebKey} opts.body 
     * @param {module:api/AdminApi~updateJsonWebKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JSONWebKey}
     */
    updateJsonWebKey(kid, set, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      // verify the required parameter 'kid' is set
      if (kid === undefined || kid === null) {
        throw new Error("Missing the required parameter 'kid' when calling updateJsonWebKey");
      }

      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling updateJsonWebKey");
      }


      let pathParams = {
        'kid': kid,
        'set': set
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JSONWebKey;

      return this.apiClient.callApi(
        '/keys/{set}/{kid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJsonWebKeySet operation.
     * @callback module:api/AdminApi~updateJsonWebKeySetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JSONWebKeySet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a JSON Web Key Set
     * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
     * @param {String} set The set
     * @param {Object} opts Optional parameters
     * @param {module:model/JSONWebKeySet} opts.body 
     * @param {module:api/AdminApi~updateJsonWebKeySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JSONWebKeySet}
     */
    updateJsonWebKeySet(set, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      // verify the required parameter 'set' is set
      if (set === undefined || set === null) {
        throw new Error("Missing the required parameter 'set' when calling updateJsonWebKeySet");
      }


      let pathParams = {
        'set': set
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JSONWebKeySet;

      return this.apiClient.callApi(
        '/keys/{set}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOAuth2Client operation.
     * @callback module:api/AdminApi~updateOAuth2ClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuth2Client} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an OAuth 2.0 Client
     * Update an existing OAuth 2.0 Client. If you pass &#x60;client_secret&#x60; the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
     * @param {String} id 
     * @param {module:model/OAuth2Client} body 
     * @param {module:api/AdminApi~updateOAuth2ClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuth2Client}
     */
    updateOAuth2Client(id, body, callback) {
      let postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOAuth2Client");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateOAuth2Client");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OAuth2Client;

      return this.apiClient.callApi(
        '/clients/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
